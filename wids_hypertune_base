{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":65862,"databundleVersionId":7469115,"sourceType":"competition"}],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"e12e52c0-e2c3-4d85-a178-a0cda398f5ea","_cell_guid":"e67c1f88-a1ab-4f5a-a89d-fafd5d62717a","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T10:31:48.485306Z","iopub.execute_input":"2024-06-19T10:31:48.485653Z","iopub.status.idle":"2024-06-19T10:31:48.511736Z","shell.execute_reply.started":"2024-06-19T10:31:48.485629Z","shell.execute_reply":"2024-06-19T10:31:48.510508Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%capture test_\n\nimport pip\n!pip install gap-stat\n!pip install yellowbrick\n!pip install optuna\n!pip install cmaes\n!pip install catboost\n!pip install lightgbm --install-option=--gpu --install-option=\"--boost-root=C:/local/boost_1_69_0\" --install-option=\"--boost-librarydir=C:/local/boost_1_69_0/lib64-msvc-14.1\"\n!pip install category_encoders\n!pip install -U imbalanced-learn;\n\n# def import_or_install(package):\n#     try:\n#         __import__(package)\n#     except ImportError:\n#         pip.main(['install', package])\n","metadata":{"_uuid":"7c9e98b7-f40a-43e8-8174-468d1397b261","_cell_guid":"537634d2-9a05-4899-9cc1-e2875c671f21","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T10:43:51.975375Z","iopub.execute_input":"2024-06-19T10:43:51.975744Z","iopub.status.idle":"2024-06-19T10:44:02.424553Z","shell.execute_reply.started":"2024-06-19T10:43:51.975718Z","shell.execute_reply":"2024-06-19T10:44:02.423465Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n\nimport sklearn\nimport numpy as np\nimport os\nimport datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport missingno as msno\nfrom prettytable import PrettyTable\n%matplotlib inline\nimport seaborn as sns\nsns.set(style='darkgrid', font_scale=1.4)\nfrom tqdm import tqdm\nfrom tqdm.notebook import tqdm as tqdm_notebook\ntqdm_notebook.get_lock().locks = []\n# !pip install sweetviz\n# import sweetviz as sv\nimport concurrent.futures\nfrom copy import deepcopy       \nfrom functools import partial\nfrom itertools import combinations\nimport random\nfrom random import randint, uniform\nimport gc\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler,PowerTransformer, FunctionTransformer\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom itertools import combinations\nfrom sklearn.impute import SimpleImputer\nimport xgboost as xg\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import mean_squared_error,mean_squared_log_error, roc_auc_score, accuracy_score, f1_score, precision_recall_curve, log_loss\nfrom sklearn.cluster import KMeans\n\nfrom yellowbrick.cluster import KElbowVisualizer\n\nfrom gap_statistic.optimalK import OptimalK\nfrom scipy import stats\nimport statsmodels.api as sm\nfrom scipy.stats import ttest_ind\nfrom scipy.stats import boxcox\nimport math\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nimport optuna\nimport cmaes\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom category_encoders import OneHotEncoder, OrdinalEncoder, CountEncoder, CatBoostEncoder\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.ensemble import RandomForestClassifier, HistGradientBoostingClassifier, GradientBoostingClassifier,ExtraTreesClassifier, AdaBoostClassifier\nfrom imblearn.ensemble import BalancedRandomForestClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom catboost import CatBoost, CatBoostRegressor, CatBoostClassifier\nfrom sklearn.svm import NuSVC, SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.impute import KNNImputer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neural_network import MLPClassifier\nfrom catboost import Pool\nimport re\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import PCA, TruncatedSVD\n\n# Suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.pandas.set_option('display.max_columns',None)","metadata":{"_uuid":"38c63448-0c4b-49ae-8ccc-c86f3e7c3e53","_cell_guid":"32322737-8ce8-4604-9cb5-e3703f55c8c0","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T10:44:27.324975Z","iopub.execute_input":"2024-06-19T10:44:27.325310Z","iopub.status.idle":"2024-06-19T10:44:33.600170Z","shell.execute_reply.started":"2024-06-19T10:44:27.325285Z","shell.execute_reply":"2024-06-19T10:44:33.598701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train=pd.read_csv('/kaggle/input/widsdatathon2024-challenge1/training.csv')\ntest=pd.read_csv('/kaggle/input/widsdatathon2024-challenge1/test.csv')\n\ntrain_copy=train.copy()\ntest_copy=test.copy()\n\ndevice='cpu'\ntarget='DiagPeriodL90D'\n\nprint(train.shape[0], test.shape[0])\ntrain.head()","metadata":{"_uuid":"83f35b8a-53ad-407f-9ac5-17237f42b1e2","_cell_guid":"1bd5c60a-bfa4-4cfd-aa9a-28ded88431db","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T10:44:33.602299Z","iopub.execute_input":"2024-06-19T10:44:33.603025Z","iopub.status.idle":"2024-06-19T10:44:34.399989Z","shell.execute_reply.started":"2024-06-19T10:44:33.602990Z","shell.execute_reply":"2024-06-19T10:44:34.398845Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.describe()","metadata":{"_uuid":"3ff90a29-ac1d-491e-a8d2-d3cc79d477ba","_cell_guid":"6c10f66a-f42a-4fee-b816-ae9159f42b53","collapsed":false,"execution":{"iopub.status.busy":"2024-06-18T06:47:39.542118Z","iopub.execute_input":"2024-06-18T06:47:39.542529Z","iopub.status.idle":"2024-06-18T06:47:39.890500Z","shell.execute_reply.started":"2024-06-18T06:47:39.542494Z","shell.execute_reply":"2024-06-18T06:47:39.889092Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.shape","metadata":{"_uuid":"59eeb2ef-b121-472b-b5f6-50ffc0645e4d","_cell_guid":"8802dc6f-3fd1-40be-9a38-0e287412b072","collapsed":false,"execution":{"iopub.status.busy":"2024-06-17T07:00:36.220564Z","iopub.execute_input":"2024-06-17T07:00:36.220914Z","iopub.status.idle":"2024-06-17T07:00:36.228551Z","shell.execute_reply.started":"2024-06-17T07:00:36.220885Z","shell.execute_reply":"2024-06-17T07:00:36.227232Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.DiagPeriodL90D.value_counts()","metadata":{"_uuid":"ab94e21b-e539-462e-a7d7-ca4825833af0","_cell_guid":"9f074e6c-c0ec-48de-9c7c-1f9f15756063","collapsed":false,"execution":{"iopub.status.busy":"2024-06-17T07:00:36.230134Z","iopub.execute_input":"2024-06-17T07:00:36.230561Z","iopub.status.idle":"2024-06-17T07:00:36.253085Z","shell.execute_reply.started":"2024-06-17T07:00:36.230525Z","shell.execute_reply":"2024-06-17T07:00:36.251763Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_rows', None)","metadata":{"_uuid":"3a2ccf41-70e3-41c4-99c3-b188afe06c52","_cell_guid":"da5a5f6f-8d0d-40ae-ba55-70d84778226a","collapsed":false,"execution":{"iopub.status.busy":"2024-06-17T07:00:36.254482Z","iopub.execute_input":"2024-06-17T07:00:36.254813Z","iopub.status.idle":"2024-06-17T07:00:36.266744Z","shell.execute_reply.started":"2024-06-17T07:00:36.254784Z","shell.execute_reply":"2024-06-17T07:00:36.265416Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.isna().sum()[train.isna().sum()>0].sort_values(ascending=False)\ntrain.isna().sum()[train.isna().sum()>0].sort_values(ascending=False)/train.shape[0]","metadata":{"_uuid":"f038289e-1d8a-41b4-8531-ddce3bba4f86","_cell_guid":"81b470f3-796e-418f-90cc-704c029e7d5e","collapsed":false,"execution":{"iopub.status.busy":"2024-06-17T07:00:36.267917Z","iopub.execute_input":"2024-06-17T07:00:36.268248Z","iopub.status.idle":"2024-06-17T07:00:36.323891Z","shell.execute_reply.started":"2024-06-17T07:00:36.268217Z","shell.execute_reply":"2024-06-17T07:00:36.322695Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"col_to_consider=(train.isna().sum().sort_values(ascending=False))[10:].keys().tolist()\ncol_not_considered=(train.isna().sum().sort_values(ascending=False))[:10].keys().tolist()","metadata":{"_uuid":"b1394b34-8186-4fb7-a987-213d5cddaec4","_cell_guid":"8c98dc77-54b8-4088-b695-6eeaf53999b8","collapsed":false,"execution":{"iopub.status.busy":"2024-06-17T07:00:36.325728Z","iopub.execute_input":"2024-06-17T07:00:36.326086Z","iopub.status.idle":"2024-06-17T07:00:36.351020Z","shell.execute_reply.started":"2024-06-17T07:00:36.326054Z","shell.execute_reply":"2024-06-17T07:00:36.349570Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trainset_df=train.copy()","metadata":{"_uuid":"be93807a-3a92-4315-a698-c04c3487d9a1","_cell_guid":"cbe13895-ff3a-46d7-8c88-1687833707e9","collapsed":false,"execution":{"iopub.status.busy":"2024-06-17T07:00:36.363145Z","iopub.execute_input":"2024-06-17T07:00:36.363545Z","iopub.status.idle":"2024-06-17T07:00:36.382823Z","shell.execute_reply.started":"2024-06-17T07:00:36.363512Z","shell.execute_reply":"2024-06-17T07:00:36.381500Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_cancer_diagnosis(text):\n    cancer_diagnosis_text1=\"\"\n    cancer_diagnosis_text2=\"\"\n    place=\"\"\n    left_or_right=\"\"\n    try: \n        text=text.replace(\",\",\"of\")\n        indexes=re.search(\"of\", text).span()\n        if len(indexes)>=2:\n            text_modified=text[indexes[0]+2:]\n            indexes_2=re.search(\"of\", text_modified).start()\n            cancer_diagnosis_text1=text_modified[:indexes_2]\n            cancer_diagnosis_text2=text_modified[indexes_2+2:]\n            cancer_diagnosis_text1=cancer_diagnosis_text1.replace(\"of\",\"\")\n            cancer_diagnosis_text2=cancer_diagnosis_text2.replace(\"of\",\"\")\n        cancer_diagnosis_text1.replace(\"of\",\"\")\n        cancer_diagnosis_text2.replace(\"of\",\"\")\n        if cancer_diagnosis_text1.find(\"breast\")>0:\n            cancer_diagnosis_text1=cancer_diagnosis_text1.replace(\"breast\",\"\")\n            place=cancer_diagnosis_text2\n            left_or_right=cancer_diagnosis_text1\n            place=place.replace(\"(\",\"\")\n            place=place.replace(\")\",\"\")\n            place=place.replace(\"female\",\"\")\n            place=place.replace(\"male\",\"\")\n            place=place.replace(\"sites\",\"\")\n            place=place.replace(\"site\",\"\")\n            place=place.replace(\"unspecified\",\"unsp\")\n            place=place.strip()\n            left_or_right=left_or_right.replace(\"(\",\"\")\n            left_or_right=left_or_right.replace(\")\",\"\")\n            left_or_right=left_or_right.replace(\"female\",\"\")\n            left_or_right=left_or_right.replace(\"male\",\"\")\n            left_or_right=left_or_right.replace(\"sites\",\"\")\n            left_or_right=left_or_right.replace(\"site\",\"\")\n            left_or_right=left_or_right.replace(\"unspecified\",\"unsp\")\n            left_or_right=left_or_right.strip()\n        if cancer_diagnosis_text2.find(\"breast\")>0:\n            cancer_diagnosis_text2=cancer_diagnosis_text2.replace(\"breast\",\"\")\n            place=cancer_diagnosis_text1\n            left_or_right=cancer_diagnosis_text2\n            place=place.replace(\"(\",\"\")\n            place=place.replace(\")\",\"\")\n            place=place.replace(\"female\",\"\")\n            place=place.replace(\"male\",\"\")\n            place=place.replace(\"sites\",\"\")\n            place=place.replace(\"site\",\"\")\n            place=place.replace(\"unspecified\",\"unsp\")\n            place=place.strip()\n            left_or_right=left_or_right.replace(\"(\",\"\")\n            left_or_right=left_or_right.replace(\")\",\"\")\n            left_or_right=left_or_right.replace(\"female\",\"\")\n            left_or_right=left_or_right.replace(\"male\",\"\")\n            left_or_right=left_or_right.replace(\"sites\",\"\")\n            left_or_right=left_or_right.replace(\"site\",\"\")\n            left_or_right=left_or_right.replace(\"unspecified\",\"unsp\")\n            left_or_right=left_or_right.strip()\n    except Exception as e:\n        print (\"exception\",e,text)\n    return place,left_or_right","metadata":{"_uuid":"8c2a7763-c6dd-4d3a-9836-c2c869c4b43b","_cell_guid":"1fbd0938-3723-4a18-abb6-edc82c00c311","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T10:47:33.178771Z","iopub.execute_input":"2024-06-19T10:47:33.179115Z","iopub.status.idle":"2024-06-19T10:47:33.195336Z","shell.execute_reply.started":"2024-06-19T10:47:33.179092Z","shell.execute_reply":"2024-06-19T10:47:33.193715Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# train_df_modify=train_df_modify.dropna()\n\n# train_df_modify.shape\n\n# train_df_modify.columns\n# list_col_obj=train_df_modify.dtypes[train_df_modify.dtypes=='object'].keys().to_list()\n# list_col_float=train_df_modify.dtypes[train_df_modify.dtypes=='float64'].keys().to_list()\n# list_col_int=train_df_modify.dtypes[train_df_modify.dtypes=='int64'].keys().to_list()\n# print(list_col_obj,'\\n',list_col_float,'\\n',list_col_int)\n\n# category_diagnosis_code = train_df_modify['metastatic_cancer_diagnosis_code'].value_counts(normalize=True)\n# train_df_modify['metastatic_cancer_diagnosis_code_encoded'] = train_df_modify['metastatic_cancer_diagnosis_code'].map(category_diagnosis_code)","metadata":{"_uuid":"966a7013-fab3-4b0c-9e3c-3f6ff43d4543","_cell_guid":"a80a6d36-b60e-4da7-b35b-7af51cdeb18e","collapsed":false,"execution":{"iopub.status.busy":"2024-06-16T15:50:21.861971Z","iopub.execute_input":"2024-06-16T15:50:21.862371Z","iopub.status.idle":"2024-06-16T15:50:21.871876Z","shell.execute_reply.started":"2024-06-16T15:50:21.862340Z","shell.execute_reply":"2024-06-16T15:50:21.870770Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"text='Malignant neoplasm of breast (female) , unspecified'\ndef get_cancer_diagnosis(text):\n    cancer_diagnosis_text1=\"\"\n    cancer_diagnosis_text2=\"\"\n    place=\"\"\n    left_or_right=\"\"\n    try: \n        text=text.replace(\",\",\"of\")\n        indexes=re.search(\"of\", text).span()\n        if len(indexes)>=2:\n            text_modified=text[indexes[0]+2:]\n            indexes_2=re.search(\"of\", text_modified).start()\n            cancer_diagnosis_text1=text_modified[:indexes_2]\n            cancer_diagnosis_text2=text_modified[indexes_2+2:]\n            cancer_diagnosis_text1=cancer_diagnosis_text1.replace(\"of\",\"\")\n            cancer_diagnosis_text2=cancer_diagnosis_text2.replace(\"of\",\"\")\n\n        cancer_diagnosis_text1.replace(\"of\",\"\")\n        cancer_diagnosis_text2.replace(\"of\",\"\")\n        if cancer_diagnosis_text1.find(\"breast\")>0:\n            cancer_diagnosis_text1=cancer_diagnosis_text1.replace(\"breast\",\"\")\n            place=cancer_diagnosis_text2\n            left_or_right=cancer_diagnosis_text1\n            place=place.replace(\"(\",\"\")\n            place=place.replace(\")\",\"\")\n            place=place.replace(\"female\",\"\")\n            place=place.replace(\"male\",\"\")\n            place=place.replace(\"sites\",\"\")\n            place=place.replace(\"site\",\"\")\n            place=place.replace(\"unspecified\",\"unsp\")\n            place=place.strip()\n            left_or_right=left_or_right.replace(\"(\",\"\")\n            left_or_right=left_or_right.replace(\")\",\"\")\n            left_or_right=left_or_right.replace(\"female\",\"\")\n            left_or_right=left_or_right.replace(\"male\",\"\")\n            left_or_right=left_or_right.replace(\"sites\",\"\")\n            left_or_right=left_or_right.replace(\"site\",\"\")\n            left_or_right=left_or_right.replace(\"unspecified\",\"unsp\")\n            left_or_right=left_or_right.strip()\n\n\n\n        if cancer_diagnosis_text2.find(\"breast\")>0:\n            cancer_diagnosis_text2=cancer_diagnosis_text2.replace(\"breast\",\"\")\n            place=cancer_diagnosis_text1\n            left_or_right=cancer_diagnosis_text2\n            place=place.replace(\"(\",\"\")\n            place=place.replace(\")\",\"\")\n            place=place.replace(\"female\",\"\")\n            place=place.replace(\"male\",\"\")\n            place=place.replace(\"sites\",\"\")\n            place=place.replace(\"site\",\"\")\n            place=place.replace(\"unspecified\",\"unsp\")\n            place=place.strip()\n            left_or_right=left_or_right.replace(\"(\",\"\")\n            left_or_right=left_or_right.replace(\")\",\"\")\n            left_or_right=left_or_right.replace(\"female\",\"\")\n            left_or_right=left_or_right.replace(\"male\",\"\")\n            left_or_right=left_or_right.replace(\"sites\",\"\")\n            left_or_right=left_or_right.replace(\"site\",\"\")\n            left_or_right=left_or_right.replace(\"unspecified\",\"unsp\")\n            left_or_right=left_or_right.strip()\n    except Exception as e:\n        print (\"exception\",e,text)\n        \n        \n    \n    \n    return place,left_or_right\n# for each_text in train_df_modify['breast_cancer_diagnosis_desc'].value_counts().keys().tolist():\n#     print(get_cancer_diagnosis(each_text))","metadata":{"_uuid":"58e57014-9a9c-4e9c-9668-7987a605a099","_cell_guid":"2ae67d58-2431-4978-8436-e257eb2a3bba","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T10:45:11.524225Z","iopub.execute_input":"2024-06-19T10:45:11.524605Z","iopub.status.idle":"2024-06-19T10:45:11.540455Z","shell.execute_reply.started":"2024-06-19T10:45:11.524582Z","shell.execute_reply":"2024-06-19T10:45:11.538908Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# train_df_modify[['cancer_diagnosis_part','cancer_diagnosis_place']]=['','']\n\n# for i,j in train_df_modify.iterrows():\n#     text=str(train_df_modify.loc[i,'breast_cancer_diagnosis_desc'])\n#     x,y=get_cancer_diagnosis(text)\n#     train_df_modify.loc[i,'cancer_diagnosis_part']=x\n#     train_df_modify.loc[i,'cancer_diagnosis_place']=y\n\n# for i in list_col_obj:\n#     print(train_df_modify[i].value_counts())\n\n# # breast cancer daignosis code & description are same ignoring code & description was encoded\n# train_df_modify.drop(['breast_cancer_diagnosis_code','breast_cancer_diagnosis_desc'],axis=1,inplace=True)\n\n# # train_df_modify.cancer_diagnosis_part.value_counts()\n# train_df_modify.cancer_diagnosis_place.value_counts()\n\n# from sklearn.preprocessing import OneHotEncoder\n# enc_part = OneHotEncoder(handle_unknown='ignore')\n# enc_place = OneHotEncoder(handle_unknown='ignore')\n# # X = [['Male', 1], ['Female', 3], ['Female', 2]]\n# enc_part.fit(train_df_modify[['cancer_diagnosis_part']])\n# enc_place.fit(train_df_modify[['cancer_diagnosis_place']])\n# print(enc_part.categories_)\n# print(enc_place.categories_)\n# # enc.categories_\n# # enc.transform([['Female', 1], ['Male', 4]]).toarray()\n# # enc.inverse_transform([[0, 1, 1, 0, 0], [0, 0, 0, 1, 0]])\n# # enc.get_feature_names_out(['gender', 'group'])\n# part_encoded=enc_part.transform(train_df_modify[['cancer_diagnosis_part']]).toarray()\n# place_encoded=enc_place.transform(train_df_modify[['cancer_diagnosis_place']],).toarray()\n# part_encoded_df=pd.DataFrame(part_encoded)\n# columns=[\"diagnosis_part_\"+i for i in enc_part.categories_[0]]\n# part_encoded_df.columns=columns\n# part_encoded_df=part_encoded_df.reset_index()\n# place_encoded_df=pd.DataFrame(place_encoded)\n# columns=[\"diagnosis_place_\"+i for i in enc_place.categories_[0]]\n# place_encoded_df.columns=columns\n# train_df_enc=pd.concat([train_df_enc,place_encoded_df],axis=1)\n# train_df_enc['patient_gender']=train_df_enc['patient_gender'].apply(lambda x:1 if x== 'F' else 0)\n# # train_df_enc.drop([\"metastatic_cancer_diagnosis_code\",\"cancer_diagnosis_part\"],axis=1,inplace=True)\n\n# train_df_enc.drop(['cancer_diagnosis_place'],axis=1,inplace=True)\n\n# # train_df_enc.drop('patient_id',axis=1,inplace=True)\n# scale_features=['Ozone', 'income_household_25_to_35', 'income_household_15_to_20',\n#        'income_household_35_to_50', 'income_household_20_to_25',\n#        'limited_english', 'income_household_10_to_15',\n#        'income_household_75_to_100', 'income_household_under_5',\n#        'income_household_median', 'income_household_50_to_75', 'home_value',\n#        'income_household_100_to_150', 'income_household_150_over',\n#        'income_household_six_figure', 'home_ownership', 'family_size',\n#        'rent_median', 'rent_burden', 'self_employed', 'farmer',\n#        'family_dual_income', 'income_household_5_to_10', 'poverty', 'veteran',\n#        'education_some_college', 'education_bachelors', 'education_graduate',\n#        'education_college_or_above', 'education_stem_degree',\n#        'labor_force_participation', 'unemployment_rate', 'health_uninsured',\n#        'race_white', 'never_married', 'race_black', 'race_asian',\n#        'race_native', 'race_pacific', 'race_other', 'race_multiple',\n#        'hispanic', 'disabled', 'education_highschool', 'widowed',\n#        'commute_time', 'population', 'divorced', 'married', 'female', 'male',\n#        'age_over_80', 'age_70s', 'age_60s', 'age_50s', 'age_40s', 'age_30s',\n#        'age_20s', 'age_10_to_19', 'age_under_10', 'income_individual_median',\n#        'age_median', 'housing_units', 'density', 'education_less_highschool',\n#         'patient_gender', 'patient_age', 'patient_zip3']\n# sc=StandardScaler()\n# train_df_enc[scale_features]=sc.fit_transform(train_df_enc[scale_features])\n# train_df_enc.columns=train_df_enc.columns.astype(str)\n# all_x_columns=train_df_enc.columns\n# all_x_columns=all_x_columns[all_x_columns!='DiagPeriodL90D']\n# X_train, X_test, y_train, y_test = train_test_split(\n# train_df_enc[all_x_columns],train_df_enc['DiagPeriodL90D'], test_size=0.2, random_state=42)","metadata":{"_uuid":"45274009-e467-40d3-8d14-28adb3af9c94","_cell_guid":"f242e357-54cb-44d2-bdd2-d1be18832684","collapsed":false,"execution":{"iopub.status.busy":"2024-06-16T15:53:25.776033Z","iopub.execute_input":"2024-06-16T15:53:25.776975Z","iopub.status.idle":"2024-06-16T15:53:25.782290Z","shell.execute_reply.started":"2024-06-16T15:53:25.776939Z","shell.execute_reply":"2024-06-16T15:53:25.781185Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Automate Pipelines","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder\nimport pickle\ndef prep_train_set(train,training_flag=1):\n    \n    col_high_missing_values=['metastatic_first_novel_treatment',\n                             'metastatic_first_novel_treatment_type',\n                             'bmi',\n                             'patient_race',\n                             'payer_type',\n                             'Region',\n                             'Division',\n                             'patient_state',\n                             'N02',\n                             'PM25']\n    columns_train_all_columns=train.columns.tolist()\n    columns_train_iter1= [x for x in columns_train_all_columns if x not in col_high_missing_values]\n    trainset_df=train[columns_train_iter1]\n    list_col_obj=trainset_df.dtypes[trainset_df.dtypes=='object'].keys().to_list()\n    list_col_float=trainset_df.dtypes[trainset_df.dtypes=='float64'].keys().to_list()\n    list_col_int=trainset_df.dtypes[trainset_df.dtypes=='int64'].keys().to_list()\n    if training_flag==1:\n        category_diagnosis_code_dict = trainset_df['metastatic_cancer_diagnosis_code'].value_counts(normalize=True).to_dict()\n        for i in category_diagnosis_code_dict.keys():\n            category_diagnosis_code_dict[i]=int(category_diagnosis_code_dict[i]*100)\n        with open(\"dict_diagnosis_code\",\"wb\") as f:\n            pickle.dump(category_diagnosis_code_dict,f, protocol=pickle.HIGHEST_PROTOCOL)\n    else:\n        with open(\"dict_diagnosis_code\", \"rb\") as f: \n            category_diagnosis_code_dict=pickle.load( f)\n            \n    trainset_df['metastatic_cancer_diagnosis_code_encoded'] = trainset_df['metastatic_cancer_diagnosis_code'].map(category_diagnosis_code_dict)\n    trainset_df.drop(\"metastatic_cancer_diagnosis_code\",axis=1,inplace=True)\n    trainset_df[['cancer_diagnosis_part','cancer_diagnosis_place']]=['','']\n    for i,j in trainset_df.iterrows():\n        text=str(trainset_df.loc[i,'breast_cancer_diagnosis_desc'])\n        x,y=get_cancer_diagnosis(text)\n        trainset_df.loc[i,'cancer_diagnosis_part']=x\n        trainset_df.loc[i,'cancer_diagnosis_place']=y\n    # breast cancer daignosis code & description are same ignoring code & description was encoded\n    trainset_df.drop(['breast_cancer_diagnosis_code','breast_cancer_diagnosis_desc'],axis=1,inplace=True)\n    ## for cancer part & place\n    if training_flag==1:\n        enc_part = OneHotEncoder(handle_unknown='ignore')\n        enc_place = OneHotEncoder(handle_unknown='ignore')\n        enc_part.fit(trainset_df[['cancer_diagnosis_part']])\n        enc_place.fit(trainset_df[['cancer_diagnosis_place']])\n        with open(\"encoder_part\", \"wb\") as f: \n            pickle.dump(enc_part, f)\n        with open(\"encoder_place\", \"wb\") as f: \n            pickle.dump(enc_place, f)\n    else:\n        with open(\"encoder_part\", \"rb\") as f: \n            enc_part=pickle.load( f)\n        with open(\"encoder_place\", \"rb\") as f: \n            enc_place=pickle.load( f)\n    part_encoded=enc_part.transform(trainset_df[['cancer_diagnosis_part']]).toarray()\n    place_encoded=enc_place.transform(trainset_df[['cancer_diagnosis_place']],).toarray()\n    part_encoded_df=pd.DataFrame(part_encoded)\n    columns=[\"diagnosis_part_\"+i for i in enc_part.categories_[0]]\n    part_encoded_df.columns=columns\n    part_encoded_df=part_encoded_df.reset_index()\n    place_encoded_df=pd.DataFrame(place_encoded)\n    columns=[\"diagnosis_place_\"+i for i in enc_place.categories_[0]]\n    place_encoded_df.columns=columns\n    trainset_df_enc=pd.concat([trainset_df,part_encoded_df],axis=1)\n    trainset_df_enc=pd.concat([trainset_df_enc,place_encoded_df],axis=1)\n    trainset_df_enc['patient_gender']=trainset_df_enc['patient_gender'].apply(lambda x:1 if x== 'F' else 0)\n\n    trainset_df_enc.drop(['cancer_diagnosis_part','cancer_diagnosis_place'],axis=1,inplace=True)\n    scale_features=['Ozone', 'income_household_25_to_35', 'income_household_15_to_20',\n       'income_household_35_to_50', 'income_household_20_to_25',\n       'limited_english', 'income_household_10_to_15',\n       'income_household_75_to_100', 'income_household_under_5',\n       'income_household_median', 'income_household_50_to_75', 'home_value',\n       'income_household_100_to_150', 'income_household_150_over',\n       'income_household_six_figure', 'home_ownership', 'family_size',\n       'rent_median', 'rent_burden', 'self_employed', 'farmer',\n       'family_dual_income', 'income_household_5_to_10', 'poverty', 'veteran',\n       'education_some_college', 'education_bachelors', 'education_graduate',\n       'education_college_or_above', 'education_stem_degree',\n       'labor_force_participation', 'unemployment_rate', 'health_uninsured',\n       'race_white', 'never_married', 'race_black', 'race_asian',\n       'race_native', 'race_pacific', 'race_other', 'race_multiple',\n       'hispanic', 'disabled', 'education_highschool', 'widowed',\n       'commute_time', 'population', 'divorced', 'married', 'female', 'male',\n       'age_over_80', 'age_70s', 'age_60s', 'age_50s', 'age_40s', 'age_30s',\n       'age_20s', 'age_10_to_19', 'age_under_10', 'income_individual_median',\n       'age_median', 'housing_units', 'density', 'education_less_highschool',\n        'patient_gender', 'patient_age', 'patient_zip3']\n    if training_flag==1:\n        sc_numeric_features=StandardScaler()\n        sc_numeric_features.fit(trainset_df_enc[scale_features])\n        with open(\"scal_transformer_numeric_features\", \"wb\") as f: \n            pickle.dump( sc_numeric_features,f)\n    else:\n        with open(\"scal_transformer_numeric_features\", \"rb\") as f: \n            sc_numeric_features=pickle.load( f)\n    trainset_df_enc[scale_features]=sc_numeric_features.transform(trainset_df_enc[scale_features])\n    \n    trainset_df_enc.columns=trainset_df_enc.columns.astype(str)\n    all_x_columns=trainset_df_enc.columns\n    all_x_columns=all_x_columns[all_x_columns!='DiagPeriodL90D']\n    return trainset_df_enc,all_x_columns","metadata":{"_uuid":"4d9d838e-3c91-412a-a832-e5247de8fe51","_cell_guid":"4173979d-f612-4cac-9607-3a0fb4eb6b1a","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T11:33:30.111335Z","iopub.execute_input":"2024-06-19T11:33:30.111727Z","iopub.status.idle":"2024-06-19T11:33:30.132858Z","shell.execute_reply.started":"2024-06-19T11:33:30.111703Z","shell.execute_reply":"2024-06-19T11:33:30.131697Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_x,x_columns=prep_train_set(train,1)\ntrain_x.dropna(inplace=True)\n## split data\nX_train, X_test, y_train, y_test = train_test_split(\ntrain_x[x_columns],train_x['DiagPeriodL90D'], test_size=0.2, random_state=42)","metadata":{"_uuid":"ed964fce-bd4d-4186-b256-9d015ead38b9","_cell_guid":"02016e65-a6c1-49ab-b812-33e80e75c76b","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T11:33:31.705106Z","iopub.execute_input":"2024-06-19T11:33:31.705458Z","iopub.status.idle":"2024-06-19T11:33:35.085852Z","shell.execute_reply.started":"2024-06-19T11:33:31.705435Z","shell.execute_reply":"2024-06-19T11:33:35.084179Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Modeling","metadata":{"_uuid":"71d29e2c-9a8f-4b55-82bd-91c06bd6e1c3","_cell_guid":"c7d25ce1-a5a4-44e7-8911-a2bec2f169fb","trusted":true}},{"cell_type":"code","source":"train_x.isna().sum()\nprint(train_x.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-19T10:49:17.768572Z","iopub.execute_input":"2024-06-19T10:49:17.768925Z","iopub.status.idle":"2024-06-19T10:49:17.779509Z","shell.execute_reply.started":"2024-06-19T10:49:17.768903Z","shell.execute_reply":"2024-06-19T10:49:17.778120Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Please write all the code with proper documentation\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\nfrom sklearn import  tree\nimport seaborn as sns\n#\n# set the tuning parameters\nif True:\n    tuned_parameters = [{\"max_depth\": [1, 5, 10, 50, 100, 500, 100],\n                        \"min_samples_split\":[5, 10, 100, 500]}]\n    # Using GridSearch to find best decision tree\n    model_bow_gs_decision = GridSearchCV( tree.DecisionTreeClassifier(), tuned_parameters)\n    model_bow_gs_decision.fit(X_train, y_train)\n    pred=model_bow_gs_decision.predict(X_test)\n    with open(\"model_bow_dcstree_gs_v1.pkl\",\"wb\") as f:\n        pickle.dump(model_bow_gs_decision,f)\nelse:\n    with open(\"model_bow_dcstree_gs_v1.pkl\",\"rb\") as f:\n        model_bow_gs_decision=pickle.load(f)\n\n","metadata":{"_uuid":"00d80a3d-5783-40ae-88f2-ab29fa53bc99","_cell_guid":"c301a152-ca30-4ef7-8fb7-7a95028e8d2d","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T10:50:52.111587Z","iopub.execute_input":"2024-06-19T10:50:52.111920Z","iopub.status.idle":"2024-06-19T10:51:43.641150Z","shell.execute_reply.started":"2024-06-19T10:50:52.111898Z","shell.execute_reply":"2024-06-19T10:51:43.640020Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def print_metrics(model,y_test,X_test):\n    fig, axes = plt.subplots(1,2, figsize=(10,5), sharey=True)\n    pred=model.predict(X_test)\n    # print the metrics of the best decision tree\n    confusionMatrix = metrics.confusion_matrix(y_test,pred)\n    print(confusionMatrix)\n    print('f1_score',metrics.f1_score(y_test, pred, average=\"micro\"))\n    print('precision score',metrics.precision_score(y_test,pred))\n    print('recall score',metrics.recall_score(y_test,pred))\n    fpr, tpr, bow_thresholds = metrics.roc_curve(y_test,pred)\n    print('Area under curve',metrics.auc(fpr, tpr))\n    heatmap = sns.heatmap(confusionMatrix.T,annot=True,square=True,ax=axes[0])\n    print(model.best_estimator_)\n    # print(model_bow_gs_decision.score(pred, y_test))\n    nrm_confusion_matrix=confusionMatrix/confusionMatrix.sum(axis=1)[:,np.newaxis]\n    heatmap = sns.heatmap(nrm_confusion_matrix.T,annot=True,square=True,ax=axes[1])\n    #  store the metrics to compare using prettytable\n    result_bow_decision_gs_best_estimator=model_bow_gs_decision.best_estimator_\n    result_bow_decision_gs_auc=metrics.auc(fpr, tpr)\n    result_bow_decision_gs_model='BOW_GridSearch_Decision_Tree'\nprint_metrics(model_bow_gs_decision,y_test,X_test)","metadata":{"_uuid":"5ccf0ce8-89db-4fd2-b39d-c8023bcf1f70","_cell_guid":"7b75e593-7689-4a37-87e9-319db0276475","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T11:16:24.541726Z","iopub.execute_input":"2024-06-19T11:16:24.542071Z","iopub.status.idle":"2024-06-19T11:16:25.073727Z","shell.execute_reply.started":"2024-06-19T11:16:24.542048Z","shell.execute_reply":"2024-06-19T11:16:25.072384Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Please write all the code with proper documentation\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\nfrom sklearn import  tree\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\n#fig, axes = plt.subplots(1,2, figsize=(10,5), sharey=True)\n# set the tuning parameters\nif True:\n    tuned_parameters = [{\"n_estimators\": [ 5,10,50],\n                        \"max_depth\":[10,50],\n                        \"criterion\":[\"gini\",\"entropy\"]}]\n\n    # Using GridSearch to find best decision tree\n    model_grid_rfc = GridSearchCV(estimator=RandomForestClassifier(), \n                                         param_grid=  tuned_parameters,\n                                        scoring='roc_auc',\n                                        cv=5,\n                                        verbose=100,)\n    model_grid_rfc.fit(X_train, y_train)\n    model_grid_rfc.best_score_\n    model_grid_rfc.best_estimator_.get_params()\n    with open(\"model_bow_randomforest_gs_v1.pkl\",\"wb\") as f:\n        pickle.dump(model_grid_rfc,f)\nelse:\n    with open(\"model_bow_randomforest_gs_v1.pkl\",\"rb\") as f:\n        model_grid_rfc=pickle.load(f)\n\n# pred=model_bow_gs_decision.predict(X_test)","metadata":{"_uuid":"76391b2d-3b9e-49ea-831d-e7d13e84100e","_cell_guid":"574b501c-c062-49f5-98c5-d71a27281970","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T11:16:54.638530Z","iopub.execute_input":"2024-06-19T11:16:54.638889Z","iopub.status.idle":"2024-06-19T11:17:44.567695Z","shell.execute_reply.started":"2024-06-19T11:16:54.638866Z","shell.execute_reply":"2024-06-19T11:17:44.566687Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print_metrics(model_grid_rfc,y_test,X_test)","metadata":{"_uuid":"c778e339-c936-4db9-8b2d-df3137b6b842","_cell_guid":"e71de575-271d-4795-b24c-29d177901a0d","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-06-19T11:24:31.339941Z","iopub.execute_input":"2024-06-19T11:24:31.340290Z","iopub.status.idle":"2024-06-19T11:24:31.888086Z","shell.execute_reply.started":"2024-06-19T11:24:31.340266Z","shell.execute_reply":"2024-06-19T11:24:31.886914Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from sklearn.model_selection import RandomizedSearchCV\n# from sklearn import metrics\n# from sklearn import  tree\n# import seaborn as sns\n# from sklearn.ensemble import RandomForestClassifier\n# #fig, axes = plt.subplots(1,2, figsize=(10,5), sharey=True)\n# # set the tuning parameters\n# tuned_parameters = [{\"n_estimators\": np.arange(10,100,20),\n#                     \"max_depth\":np.arange(10,50,50),\n#                     \"criterion\":[\"gini\",\"entropy\"]}]\n                    \n# # Using GridSearch to find best decision tree\n# model_grid = RandomizedSearchCV(estimator=RandomForestClassifier(), \n#                                       param_distributions=  tuned_parameters,\n#                                         scoring='roc_auc',\n#                                         cv=5,\n#                                         verbose=100,)\n# model_grid.fit(X_train, y_train)\n# print(model_grid.best_score_)\n# print(model_grid.best_estimator_.get_params())","metadata":{"_uuid":"1292f148-5738-4753-805a-e14eb577db3b","_cell_guid":"0b1983a7-af2f-45a1-b85e-a238535e8113","collapsed":false,"execution":{"iopub.status.busy":"2024-06-16T16:45:11.626978Z","iopub.execute_input":"2024-06-16T16:45:11.627259Z","iopub.status.idle":"2024-06-16T16:46:23.179263Z","shell.execute_reply.started":"2024-06-16T16:45:11.627235Z","shell.execute_reply":"2024-06-16T16:46:23.178268Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from skopt import gp_minimize\n# from skopt import space\n# from sklearn.model_selection import StratifiedKFold\n# def optimize (params_val,param_names,x,y):\n#     params=dict(zip(params_val,param_names))\n#     print(params)\n#     model=RandomForestClassifier(**params)\n#     kf=StratifiedKFold(n_splits=5)\n#     auc_scores=[]\n#     for i, (train_idx, test_idx) in enumerate(kf.split(X=x, y=y)):\n#         print(f\"Fold {i}:\")\n# #         print(f\"  Train: index={train_index}\")\n# #         print(f\"  Test:  index={test_index}\")\n#     #for idx in kf.split(X=x,y=y):\n#      #   train_idx,test_idx=idx[0],idx[1]\n#         x_train=x.iloc[train_idx]\n#         y_train=y.iloc[train_idx]\n#         x_test=x.iloc[test_idx]\n#         y_test=y.iloc[test_idx]\n#         model.fit(x_train,y_train)\n#         y_pred=model.predict(x_test)\n#         auc_score=metrics.roc_auc_score(y_test,y_pred)\n#         auc_scores.append(auc_score)\n#     return -1*np.mean(auc_scores)\n\n# param_space=[space.Integer(5,100,name='max_depth'),\n#             space.Integer(50,500,name='n_estimators'),\n#             space.Categorical(['gini','entropy'],name='criterion'),\n#             space.Real(0,1,prior='uniform',name='max_features')]\n# param_names=['max_depth','n_estimators','criterion','max_features']\n# np.int = int\n# optimization_function=partial(optimize,param_names,x=X_train,y=y_train)\n\n# results=gp_minimize(optimization_function,\n#                    dimensions=param_space,\n#                    n_calls=15,\n#                     n_random_starts=10,\n#                     verbose=10\n#                     )\n# print(dict(param_names,results.x))","metadata":{"_uuid":"c51bad04-8427-4e7a-9b29-aa7e9971b071","_cell_guid":"f8630c90-e1a7-4c36-a96c-1c32057d3f0f","collapsed":false,"execution":{"iopub.status.busy":"2024-06-16T16:46:53.151065Z","iopub.execute_input":"2024-06-16T16:46:53.151516Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from skopt import gp_minimize\n# from skopt import space\n# from sklearn.model_selection import StratifiedKFold\n# from hyperopt import hp,fmin,tpe,Trials\n# from hyperopt.pyll.base import scope\n# def optimize (params,x,y):\n#     model=RandomForestClassifier(**params)\n#     kf=StratifiedKFold(n_splits=5)\n#     auc_scores=[]\n#     for i, (train_idx, test_idx) in enumerate(kf.split(X=x, y=y)):\n#         print(f\"Fold {i}:\")\n#         x_train=x.iloc[train_idx]\n#         y_train=y.iloc[train_idx]\n#         x_test=x.iloc[test_idx]\n#         y_test=y.iloc[test_idx]\n#         model.fit(x_train,y_train)\n#         y_pred=model.predict(x_test)\n#         auc_score=metrics.roc_auc_score(y_test,y_pred)\n#         auc_scores.append(auc_score)\n#     return -1*np.mean(auc_scores)\n\n# param_space={\n#  'max_depth':scope.int(hp.quniform(\"max_depth\",3,15,1)),\n#     'n_estimators':scope.int(hp.quniform(\"n_estimators\",100,500,1)),\n#     'criterion':hp.choice('criterion',['gini','entropy']),\n#     'max_features':hp.uniform('max_features',0.01,1)\n# }\n# optimization_function=partial(optimize,x=X_train,y=y_train)\n# trials=Trials()\n\n# results=fmin(fn=optimization_function,\n#              space=param_space,\n#              trials=trials,\n#              algo=tpe.suggest,\n#              max_evals=15)\n# print(dict(zip(param_names,results.x)))","metadata":{"_uuid":"26f335d3-5490-4898-9d3c-a6d3ec338bf5","_cell_guid":"37c0b7bc-e103-42fd-8a93-cacb41057b64","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from skopt import gp_minimize\n# from skopt import space\n# from sklearn.model_selection import StratifiedKFold\n# from hyperopt import hp,fmin,tpe,Trials\n# from hyperopt.pyll.base import scope\n# import optuna\n# def optimize (trail,x,y):\n#     max_depth=trial.suggest_int('max_depth',10,15)\n#     n_estimators=trial.suggest_int('n_estimators',50,500)\n#     max_features=trail.suggest_uniform('max_features',.01,1.0)\n#     criterion=trial.suggest_categorical('criterion',['gini','entropy'])\n#     model=RandomForestClassifier(max_depth=max_depth,\n#                                 n_estimators=n_estimators,\n#                                  max_features=max_features,\n#                                  criterion=criterion\n#                                 )\n#     kf=StratifiedKFold(n_splits=5)\n#     auc_scores=[]\n#     for i, (train_idx, test_idx) in enumerate(kf.split(X=x, y=y)):\n#         print(f\"Fold {i}:\")\n#         x_train=x.iloc[train_idx]\n#         y_train=y.iloc[train_idx]\n#         x_test=x.iloc[test_idx]\n#         y_test=y.iloc[test_idx]\n#         model.fit(x_train,y_train)\n#         y_pred=model.predict(x_test)\n#         auc_score=metrics.roc_auc_score(y_test,y_pred)\n#         auc_scores.append(auc_score)\n#     return -1*np.mean(auc_scores)\n\n# study=optuna.create_study(direction='minimize')\n# optimization_function=partial(optimize,x=X_train,y=y_train)\n# study.optimize(optimization_function,n_trails=15)\n# print(dict(zip(param_names,results.x)))","metadata":{"_uuid":"2f79c589-7eeb-4cb8-9473-a10286925096","_cell_guid":"8a60d000-108b-4c0d-850e-0c74763bb0dc","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Test Predictions","metadata":{}},{"cell_type":"code","source":"df_test=pd.read_csv('/kaggle/input/widsdatathon2024-challenge1/test.csv')\ndf_sample=pd.read_csv('/kaggle/input/widsdatathon2024-challenge1/sample_submission.csv')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-19T11:25:50.177551Z","iopub.execute_input":"2024-06-19T11:25:50.177922Z","iopub.status.idle":"2024-06-19T11:25:50.254146Z","shell.execute_reply.started":"2024-06-19T11:25:50.177899Z","shell.execute_reply":"2024-06-19T11:25:50.252929Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_x,x_columns_test=prep_train_set(df_test,0)\n#x=test_x.isna().sum()[test_x.isna().sum()>0].to_dict().keys()\ntest_x.fillna(test_x.mean(),inplace=True)\ny_pred_test=model_grid_rfc.predict(test_x[x_columns])\n\ny_pred_test_proba=model_grid_rfc.predict(test_x[x_columns])","metadata":{"execution":{"iopub.status.busy":"2024-06-19T11:54:47.284897Z","iopub.execute_input":"2024-06-19T11:54:47.285275Z","iopub.status.idle":"2024-06-19T11:54:47.397129Z","shell.execute_reply.started":"2024-06-19T11:54:47.285250Z","shell.execute_reply":"2024-06-19T11:54:47.395927Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_x['DiagPeriodL90D']=y_pred_test_proba\ndf_submit=test_x[['patient_id','DiagPeriodL90D']]\ndf_submit.to_csv(\"/kaggle/working/submission.csv\",index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-19T12:18:36.684597Z","iopub.execute_input":"2024-06-19T12:18:36.684974Z","iopub.status.idle":"2024-06-19T12:18:36.695293Z","shell.execute_reply.started":"2024-06-19T12:18:36.684951Z","shell.execute_reply":"2024-06-19T12:18:36.694012Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-06-19T11:56:56.604810Z","iopub.execute_input":"2024-06-19T11:56:56.605197Z","iopub.status.idle":"2024-06-19T11:56:56.612095Z","shell.execute_reply.started":"2024-06-19T11:56:56.605167Z","shell.execute_reply":"2024-06-19T11:56:56.610724Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#feature engineering\n# percentage_related_fields=[\n# 'age_median',\n#  'age_under_10',\n#  'age_10_to_19',\n#  'age_20s',\n#  'age_30s',\n#  'age_40s',\n#  'age_50s',\n#  'age_60s',\n#  'age_70s',\n#  'age_over_80',\n#     'income_household_median',\n#  'income_household_under_5',\n#  'income_household_5_to_10',\n#  'income_household_10_to_15',\n#  'income_household_15_to_20',\n#  'income_household_20_to_25',\n#  'income_household_25_to_35',\n#  'income_household_35_to_50',\n#  'income_household_50_to_75',\n#  'income_household_75_to_100',\n#  'income_household_100_to_150',\n#  'income_household_150_over',\n#  'income_household_six_figure',\n#  'income_individual_median',\n# 'education_less_highschool',\n#  'education_highschool',\n#  'education_some_college',\n#  'education_bachelors',\n#  'education_graduate',\n#  'education_college_or_above',\n#  'education_stem_degree']\n# list_col_obj=train.dtypes[train.dtypes=='object'].keys().to_list()\n# list_col_float=train.dtypes[train.dtypes=='float64'].keys().to_list()\n# list_col_int=train.dtypes[train.dtypes=='int64'].keys().to_list()\n# print(list_col_obj,'\\n',list_col_float,'\\n',list_col_int)\n# for i in list_col_obj:\n#     print(train[i].value_counts())","metadata":{"_uuid":"4367c8e3-f1fe-4789-bb18-b7de34520553","_cell_guid":"5a605963-4439-4e09-ac5d-f5da3b0c2995","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n","metadata":{"_uuid":"32982091-485d-4312-abd0-b01497455808","_cell_guid":"10c1bcb8-2933-4d9c-acab-c37f24d0d218","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"_uuid":"b01cec04-3dc1-4ba5-a24c-4e093e295d00","_cell_guid":"20ad54dc-ed8e-4b94-8c94-c3d97f9946ee","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"_uuid":"c3e93974-5b63-4fee-b64a-533712695b8f","_cell_guid":"3ff988c4-cb99-4647-b855-0c0cb38d9793","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}